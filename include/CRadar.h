class CSprite2d;

enum eRadarBlip
{
	SPRITE_HIGHER,
	SPRITE_LEVEL,
	SPRITE_LOWER,
	SPRITE_OBJECTIVE_HIGHER,
	SPRITE_OBJECTIVE,
	SPRITE_OBJECTIVE_LOWER,
	SPRITE_CENTRE,
	SPRITE_NORTH,
	SPRITE_WAYPOINT,
	SPRITE_WEAPON_PISTOL,
	SPRITE_WEAPON_SHOTGUN,
	SPRITE_WEAPON_SMG,
	SPRITE_WEAPON_ASSAULT_RIFLE,
	SPRITE_WEAPON_ROCKET,
	SPRITE_WEAPON_GRENADES,
	SPRITE_WEAPON_MOLOTOV,
	SPRITE_WEAPON_SNIPER,
	SPRITE_WEAPON_BAT,
	SPRITE_WEAPON_KNIFE,
	SPRITE_WEAPON_HEALTH,
	SPRITE_WEAPON_ARMOUR,
	SPRITE_BURGERSHOT,
	SPRITE_CHICKEN,
	SPRITE_VLAD,
	SPRITE_INTERNET,
	SPRITE_MANNY,
	SPRITE_LITTLEJACOB,
	SPRITE_ROMAN,
	SPRITE_FAUSTIN,
	SPRITE_SAFEHOUSE,
	SPRITE_TAXI,
	SPRITE_BERNIECRANE,
	SPRITE_BRUCIE,
	SPRITE_CIA,
	SPRITE_DWAYNE,
	SPRITE_ELIZABETA,
	SPRITE_GAMBETTI,
	SPRITE_JIMMY,
	SPRITE_MCDERRICK,
	SPRITE_MCFRANCIS,
	SPRITE_MCGERRY,
	SPRITE_MCKATIE,
	SPRITE_MCPACKIE,
	SPRITE_PHILBELL,
	SPRITE_PLAYBOYX,
	SPRITE_RAYBOCCINO,
	SPRITE_8BALL,
	SPRITE_BAR,
	SPRITE_BOATTOUR,
	SPRITE_BOWLING,
	SPRITE_CLOTHES,
	SPRITE_CLUB,
	SPRITE_DARTS,
	SPRITE_DWAYNE_RED,
	SPRITE_GIRLFRIEND,
	SPRITE_PLAYBOYX_RED,
	SPRITE_HELITOUR,
	SPRITE_RESTAURANT,
	SPRITE_STATION,
	SPRITE_WEAPONS,
	SPRITE_POLICE,
	SPRITE_FIRE,
	SPRITE_HOSPITAL,
	SPRITE_MALE,
	SPRITE_FEMALE,
	SPRITE_RACEFLAG,
	SPRITE_STRIPCLUB,
	SPRITE_EMPTY,
	SPRITE_POLICE_CHASE,
	SPRITE_DIMITRI,
	SPRITE_COMEDY,
	SPRITE_CABARET,
	SPRITE_RANSOM,
	SPRITE_POLICE_HELI,
	SPRITE_MICHELLE,
	SPRITE_SPRAYSHOP,
	SPRITE_ASSASSIN,
	SPRITE_SNAKE,
	SPRITE_DEAL,
	SPRITE_CAR,
	SPRITE_LAWYER,
	SPRITE_CUP,
	SPRITE_MULTIPLAYER,
	SPRITE_STATION_3,
	SPRITE_STATION_8,
	SPRITE_STATION_A,
	SPRITE_STATION_B,
	SPRITE_STATION_C,
	SPRITE_STATION_E,
	SPRITE_STATION_J,
	SPRITE_STATION_K,
	SPRITE_CARWASH,
	SPRITE_UNITED_LIBERTY_PAPER,
	SPRITE_WEAPON_UP,
	SPRITE_WEAPON_DOWN,
	SPRITE_EPISODE_BLIP_1,
	SPRITE_EPISODE_BLIP_2,
	SPRITE_EPISODE_BLIP_3,
	SPRITE_EPISODE_BLIP_4,
	SPRITE_EPISODE_BLIP_5,
	SPRITE_EPISODE_BLIP_6,
	SPRITE_EPISODE_BLIP_7,
	SPRITE_EPISODE_BLIP_8,
	SPRITE_EPISODE_BLIP_9,
	SPRITE_EPISODE_BLIP_10,
	SPRITE_EPISODE_BLIP_11,
	SPRITE_EPISODE_BLIP_12,
	SPRITE_EPISODE_BLIP_13,
	SPRITE_EPISODE_BLIP_14,
	SPRITE_EPISODE_BLIP_15,
	SPRITE_ARMWRESTLING,
	SPRITE_ROADRAGE,
	SPRITE_CARDGAME,
	SPRITE_AIRHOCKEY,
	SPRITE_GANGWAR,
	SPRITE_WEAPON_POOLCUE,
	SPRITE_WEAPON_PIPEBOMB,
	SPRITE_WEAPON_GRENADELAUNCHER,
	SPRITE_TERRY,
	SPRITE_CLAY,
	SPRITE_TERRITORY_1,
	SPRITE_TERRITORY_2,
	SPRITE_TERRITORY_3,
	SPRITE_TERRITORY_4,
	SPRITE_TERRITORY_5,
	SPRITE_TERRITORY_6,
	SPRITE_MOTORCYCLE,
	SPRITE_JIMSWEAPON,
	SPRITE_WEAPON_STICKYBOMB,
};

struct sRadarTraceProperties
{
	uint8_t pad[0x4];									// 00-04
	uint32_t m_nSprite;									// 04-08
};

struct sRadarTrace
{
	uint8_t pad[0x8];									// 00-08
	uint8_t m_bSomething;								// 08-09 usually 1, if not then it reads everything from ms_RadarTrace[dword_B35F1C]
	uint8_t pad2[0x3];									// 09-0C
	uint32_t m_nDisplay;								// 0C-10
	uint8_t pad3[0x8];									// 10-18
	float m_fScaleActual;								// 18-1C
	uint8_t pad4[0x4];									// 1C-20
	uint8_t m_nFlags;									// 20-24
	uint8_t pad5[0xF];									// 09-20
	CVector m_vPos;										// 30-3C
	uint8_t pad6[0x4];									// 3C-40
	float m_fRotation;									// 40-44
	uint8_t pad7[0xC];									// 44-50
	float m_fScale;										// 50-54
	uint32_t m_nColour;									// 54-58 
	uint8_t m_nAlpha;									// 58-59
	uint8_t pad8[0x3];									// 59-5C
	sRadarTraceProperties* m_pProperties;				// 5C-60
};
VALIDATE_OFFSET(sRadarTrace, m_bSomething, 0x8);
VALIDATE_OFFSET(sRadarTrace, m_nDisplay, 0xC);
VALIDATE_OFFSET(sRadarTrace, m_fScaleActual, 0x18);
VALIDATE_OFFSET(sRadarTrace, m_nFlags, 0x20);
VALIDATE_OFFSET(sRadarTrace, m_vPos, 0x30);
VALIDATE_OFFSET(sRadarTrace, m_fRotation, 0x40);
VALIDATE_OFFSET(sRadarTrace, m_fScale, 0x50);
VALIDATE_OFFSET(sRadarTrace, m_nAlpha, 0x58);
VALIDATE_OFFSET(sRadarTrace, m_pProperties, 0x5C);

class CRadar
{
public:
	static inline sRadarTrace** ms_RadarTrace = (sRadarTrace**)AddressSetter::Get(0xD9ED50, 0xDE83A0); // ms_RadarTrace[1500]
	static inline float& m_radarRange = AddressSetter::GetRef<float>(0xD9ED40, 0xDE8390);
	static inline CSprite2d& m_pRadarRingBack = AddressSetter::GetRef<CSprite2d>(0xB1C9B0, 0xB35F50);
	static inline CSprite2d& m_pRadarRingFront = AddressSetter::GetRef<CSprite2d>(0xB1C9B4, 0xB35F54);
	static inline CSprite2d** RadarSprites = (CSprite2d**)AddressSetter::Get(0xD9EB20, 0xDE8170); // RadarSprites[128]
};